/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getAllNotificationsByUser } from '../fn/notification/get-all-notifications-by-user';
import { GetAllNotificationsByUser$Params } from '../fn/notification/get-all-notifications-by-user';
import { markRead } from '../fn/notification/mark-read';
import { MarkRead$Params } from '../fn/notification/mark-read';
import { NotificationResponse } from '../models/notification-response';

@Injectable({ providedIn: 'root' })
export class NotificationService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `markRead()` */
  static readonly MarkReadPath = '/notification/{id}/read';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `markRead()` instead.
   *
   * This method doesn't expect any request body.
   */
  markRead$Response(params: MarkRead$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return markRead(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `markRead$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  markRead(params: MarkRead$Params, context?: HttpContext): Observable<void> {
    return this.markRead$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getAllNotificationsByUser()` */
  static readonly GetAllNotificationsByUserPath = '/notification';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllNotificationsByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllNotificationsByUser$Response(params?: GetAllNotificationsByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<NotificationResponse>>> {
    return getAllNotificationsByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllNotificationsByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllNotificationsByUser(params?: GetAllNotificationsByUser$Params, context?: HttpContext): Observable<Array<NotificationResponse>> {
    return this.getAllNotificationsByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<NotificationResponse>>): Array<NotificationResponse> => r.body)
    );
  }

}
