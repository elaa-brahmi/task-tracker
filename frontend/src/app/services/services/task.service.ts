/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteTask } from '../fn/task/delete-task';
import { DeleteTask$Params } from '../fn/task/delete-task';
import { findAllTasksByUserId } from '../fn/task/find-all-tasks-by-user-id';
import { FindAllTasksByUserId$Params } from '../fn/task/find-all-tasks-by-user-id';
import { findTaskById } from '../fn/task/find-task-by-id';
import { FindTaskById$Params } from '../fn/task/find-task-by-id';
import { findTasksBycategory } from '../fn/task/find-tasks-bycategory';
import { FindTasksBycategory$Params } from '../fn/task/find-tasks-bycategory';
import { findTasksByDueDate } from '../fn/task/find-tasks-by-due-date';
import { FindTasksByDueDate$Params } from '../fn/task/find-tasks-by-due-date';
import { findTasksByKeyword } from '../fn/task/find-tasks-by-keyword';
import { FindTasksByKeyword$Params } from '../fn/task/find-tasks-by-keyword';
import { findTasksByPriority } from '../fn/task/find-tasks-by-priority';
import { FindTasksByPriority$Params } from '../fn/task/find-tasks-by-priority';
import { findTasksByStatus } from '../fn/task/find-tasks-by-status';
import { FindTasksByStatus$Params } from '../fn/task/find-tasks-by-status';
import { nbTasks } from '../fn/task/nb-tasks';
import { NbTasks$Params } from '../fn/task/nb-tasks';
import { nbTasksFinished } from '../fn/task/nb-tasks-finished';
import { NbTasksFinished$Params } from '../fn/task/nb-tasks-finished';
import { PageResponseTaskResponse } from '../models/page-response-task-response';
import { saveTask } from '../fn/task/save-task';
import { SaveTask$Params } from '../fn/task/save-task';
import { TaskResponse } from '../models/task-response';
import { updateTask } from '../fn/task/update-task';
import { UpdateTask$Params } from '../fn/task/update-task';
import { updateTaskStatus } from '../fn/task/update-task-status';
import { UpdateTaskStatus$Params } from '../fn/task/update-task-status';

@Injectable({ providedIn: 'root' })
export class TaskService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateTask()` */
  static readonly UpdateTaskPath = '/tasks/{idTask}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTask()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTask$Response(params: UpdateTask$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateTask(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTask$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTask(params: UpdateTask$Params, context?: HttpContext): Observable<void> {
    return this.updateTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteTask()` */
  static readonly DeleteTaskPath = '/tasks/{idTask}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTask()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTask$Response(params: DeleteTask$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteTask(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTask$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTask(params: DeleteTask$Params, context?: HttpContext): Observable<void> {
    return this.deleteTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `updateTaskStatus()` */
  static readonly UpdateTaskStatusPath = '/tasks/status/{idTask}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTaskStatus()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTaskStatus$Response(params: UpdateTaskStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateTaskStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTaskStatus$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTaskStatus(params: UpdateTaskStatus$Params, context?: HttpContext): Observable<void> {
    return this.updateTaskStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `findAllTasksByUserId()` */
  static readonly FindAllTasksByUserIdPath = '/tasks';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllTasksByUserId()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllTasksByUserId$Response(params?: FindAllTasksByUserId$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseTaskResponse>> {
    return findAllTasksByUserId(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllTasksByUserId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllTasksByUserId(params?: FindAllTasksByUserId$Params, context?: HttpContext): Observable<PageResponseTaskResponse> {
    return this.findAllTasksByUserId$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseTaskResponse>): PageResponseTaskResponse => r.body)
    );
  }

  /** Path part for operation `saveTask()` */
  static readonly SaveTaskPath = '/tasks';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveTask()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveTask$Response(params: SaveTask$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return saveTask(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveTask$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveTask(params: SaveTask$Params, context?: HttpContext): Observable<number> {
    return this.saveTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findTasksByStatus()` */
  static readonly FindTasksByStatusPath = '/tasks/status/{status}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findTasksByStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  findTasksByStatus$Response(params: FindTasksByStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseTaskResponse>> {
    return findTasksByStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findTasksByStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findTasksByStatus(params: FindTasksByStatus$Params, context?: HttpContext): Observable<PageResponseTaskResponse> {
    return this.findTasksByStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseTaskResponse>): PageResponseTaskResponse => r.body)
    );
  }

  /** Path part for operation `findTasksByKeyword()` */
  static readonly FindTasksByKeywordPath = '/tasks/search';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findTasksByKeyword()` instead.
   *
   * This method doesn't expect any request body.
   */
  findTasksByKeyword$Response(params: FindTasksByKeyword$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseTaskResponse>> {
    return findTasksByKeyword(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findTasksByKeyword$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findTasksByKeyword(params: FindTasksByKeyword$Params, context?: HttpContext): Observable<PageResponseTaskResponse> {
    return this.findTasksByKeyword$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseTaskResponse>): PageResponseTaskResponse => r.body)
    );
  }

  /** Path part for operation `findTasksByPriority()` */
  static readonly FindTasksByPriorityPath = '/tasks/priority/{priority}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findTasksByPriority()` instead.
   *
   * This method doesn't expect any request body.
   */
  findTasksByPriority$Response(params: FindTasksByPriority$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseTaskResponse>> {
    return findTasksByPriority(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findTasksByPriority$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findTasksByPriority(params: FindTasksByPriority$Params, context?: HttpContext): Observable<PageResponseTaskResponse> {
    return this.findTasksByPriority$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseTaskResponse>): PageResponseTaskResponse => r.body)
    );
  }

  /** Path part for operation `findTaskById()` */
  static readonly FindTaskByIdPath = '/tasks/id/{task-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findTaskById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findTaskById$Response(params: FindTaskById$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskResponse>> {
    return findTaskById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findTaskById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findTaskById(params: FindTaskById$Params, context?: HttpContext): Observable<TaskResponse> {
    return this.findTaskById$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskResponse>): TaskResponse => r.body)
    );
  }

  /** Path part for operation `nbTasksFinished()` */
  static readonly NbTasksFinishedPath = '/tasks/finished';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `nbTasksFinished()` instead.
   *
   * This method doesn't expect any request body.
   */
  nbTasksFinished$Response(params?: NbTasksFinished$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return nbTasksFinished(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `nbTasksFinished$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  nbTasksFinished(params?: NbTasksFinished$Params, context?: HttpContext): Observable<number> {
    return this.nbTasksFinished$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findTasksBycategory()` */
  static readonly FindTasksBycategoryPath = '/tasks/category/{category}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findTasksBycategory()` instead.
   *
   * This method doesn't expect any request body.
   */
  findTasksBycategory$Response(params: FindTasksBycategory$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseTaskResponse>> {
    return findTasksBycategory(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findTasksBycategory$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findTasksBycategory(params: FindTasksBycategory$Params, context?: HttpContext): Observable<PageResponseTaskResponse> {
    return this.findTasksBycategory$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseTaskResponse>): PageResponseTaskResponse => r.body)
    );
  }

  /** Path part for operation `nbTasks()` */
  static readonly NbTasksPath = '/tasks/all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `nbTasks()` instead.
   *
   * This method doesn't expect any request body.
   */
  nbTasks$Response(params?: NbTasks$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return nbTasks(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `nbTasks$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  nbTasks(params?: NbTasks$Params, context?: HttpContext): Observable<number> {
    return this.nbTasks$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findTasksByDueDate()` */
  static readonly FindTasksByDueDatePath = '/tasks/DueDate/{DueDate}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findTasksByDueDate()` instead.
   *
   * This method doesn't expect any request body.
   */
  findTasksByDueDate$Response(params: FindTasksByDueDate$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseTaskResponse>> {
    return findTasksByDueDate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findTasksByDueDate$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findTasksByDueDate(params: FindTasksByDueDate$Params, context?: HttpContext): Observable<PageResponseTaskResponse> {
    return this.findTasksByDueDate$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseTaskResponse>): PageResponseTaskResponse => r.body)
    );
  }

}
